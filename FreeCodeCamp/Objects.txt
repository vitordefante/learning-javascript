In JavaScript objects you can store data in a way you can index data the way you prefer. The data is accessed through what are called properties.

As the example: 
const cat = {
    "name": "Whiskers",
    "legs": 4,
    "tails": 1,
    "enemies":["Water", "Dogs"]
}

In the example above, all properties are strings, but you can even store data in number, and ommit the quotes is the property only has a single word.
As the example:

const stuff = {
    5: "five",
    car: "WV Golf",
    "year": "2018"
}

You can access a object property using dot notation or bracket notation. You usually use dot when you know the property name ahead of time. As for the bracket notation, you usually use when the property has a spaced name with more than 1 word.
As the example:

const me = {
    name: "Vitor",
    age: 21
} /* Dot notation */
myName = me.name
myAge = me.age

/* Bracket notation */
myName = me["name"]
myAge = me["age"]

Note that you need to use quotes in order to assign, read or access a property even if it does not have quotes in the object. Properties assigned with no quotes in the object will be automatically converted as strings by JavaScript.

You can use bracket and dot notation to reassign values of the object as well.
As the example:


me.age = 22
me["age"] = 22
me.name = "Gus"
me["name"] = "Gus"

Deleting properties from JS objects:

delete me.age;
delete me["age"];

You can access nested objects and arrays using dot and bracket notation. As example:

const ourPets = [
    {
        animalType: "cat",
        names: [
            "Meowzy",
            "Fluffy",
            "Kitcat"
        ]
    },

    {
        animalType: "dog",
        names: [
            "miney",
            "kappa",
            "sorriso"
        ]
    }
];

const Fluffy = ourPets[0].names[1];
 // Access the array ourPets, in the index 0, where the first object is stored. Then, the property names is accessed in this object, at it's index of 1. */

const Miney = ourPets[1].names[0];
 // Access the array ourPets in the index of 1, where the second object is located. Then, access the "names" property, at the index 0.